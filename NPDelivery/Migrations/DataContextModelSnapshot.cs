// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NPDelivery.Data;

#nullable disable

namespace NPDelivery.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NPDelivery.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Address = "Shadow street, 24",
                            Name = "Nora",
                            Surname = "Krinitskaya"
                        });
                });

            modelBuilder.Entity("NPDelivery.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourierId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            CustomerId = 5,
                            From = "Light street, 42",
                            StoreId = 3,
                            To = "Shadow street, 24"
                        });
                });

            modelBuilder.Entity("NPDelivery.Domain.OrderedProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderedProducts");

                    b.HasData(
                        new
                        {
                            OrderId = 6,
                            ProductId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 6,
                            ProductId = 41,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 6,
                            ProductId = 42,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("NPDelivery.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Description = "White chocolate",
                            IsAvailable = true,
                            Name = "Chocolate bar",
                            Price = 1100,
                            StoreId = 3
                        },
                        new
                        {
                            Id = 41,
                            Description = "Milk chocolate",
                            IsAvailable = true,
                            Name = "Chocolate bar",
                            Price = 1100,
                            StoreId = 3
                        },
                        new
                        {
                            Id = 42,
                            Description = "Dark chocolate",
                            IsAvailable = true,
                            Name = "Chocolate bar",
                            Price = 1100,
                            StoreId = 3
                        });
                });

            modelBuilder.Entity("NPDelivery.Domain.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("StoreKeeperId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreKeeperId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Address = "Light street, 42",
                            Description = "Description",
                            Name = "Name",
                            Score = 0,
                            StoreKeeperId = 2
                        });
                });

            modelBuilder.Entity("NPDelivery.Domain.StoreKeeper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("StoreKeepers");

                    b.HasData(
                        new
                        {
                            Id = 2
                        });
                });

            modelBuilder.Entity("NPDelivery.Domain.OrderedProduct", b =>
                {
                    b.HasOne("NPDelivery.Domain.Order", "Order")
                        .WithMany("OrderedProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NPDelivery.Domain.Product", "Product")
                        .WithMany("OrderedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NPDelivery.Domain.Product", b =>
                {
                    b.HasOne("NPDelivery.Domain.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("NPDelivery.Domain.Store", b =>
                {
                    b.HasOne("NPDelivery.Domain.StoreKeeper", "StoreKeeper")
                        .WithMany("Stores")
                        .HasForeignKey("StoreKeeperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreKeeper");
                });

            modelBuilder.Entity("NPDelivery.Domain.Order", b =>
                {
                    b.Navigation("OrderedProducts");
                });

            modelBuilder.Entity("NPDelivery.Domain.Product", b =>
                {
                    b.Navigation("OrderedProducts");
                });

            modelBuilder.Entity("NPDelivery.Domain.Store", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NPDelivery.Domain.StoreKeeper", b =>
                {
                    b.Navigation("Stores");
                });
#pragma warning restore 612, 618
        }
    }
}
